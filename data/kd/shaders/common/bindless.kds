//
// > Notice: Floating Trees Inc. @ 2025
// > Create Time: 2025-07-15 22:59:19
//

#ifndef BINDLESS_KDS
#define BINDLESS_KDS

static const uint INVALID_DESCRIPTOR = 0x00000000;

#ifdef D3D12
    #define PUSH_CONSTANTS(Type, Name) ConstantBuffer<Type> Name : register(b0)
    #define DECLARE_BINDLESS_TEXTURE2D(TypeName, Type)                     \
        Texture2D<Type> BindlessTexture2D##TypeName##_Load(uint index)    \
        {                                                                 \
            Texture2D<Type> result = ResourceDescriptorHeap[index];       \
            return result;                                                \
        }
    #define DECLARE_BINDLESS_TEXTURECUBE(TypeName, Type)                     \
        TextureCube<Type> BindlessTextureCube##TypeName##_Load(uint index)    \
        {                                                                 \
            TextureCube<Type> result = ResourceDescriptorHeap[index];       \
            return result;                                                \
        }
    #define DECLARE_BINDLESS_RWTEXTURE2D(TypeName, Type)                  \
        RWTexture2D<Type> BindlessRWTexture2D##TypeName##_Load(uint index)\
        {                                                                 \
            RWTexture2D<Type> result = ResourceDescriptorHeap[index];     \
            return result;                                                \
        }
    #define DECLARE_BINDLESS_RWTEXTURE2DARRAY(TypeName, Type)                  \
        RWTexture2DArray<Type> BindlessRWTexture2DArray##TypeName##_Load(uint index)\
        {                                                                 \
            RWTexture2DArray<Type> result = ResourceDescriptorHeap[index];     \
            return result;                                                \
        }
    #define DEFINE_CBV_ARRAY(type)                                       \
        ConstantBuffer<type> BindlessCBV_##type##_Load(uint index) {    \
            return ResourceDescriptorHeap[index];                        \
        }
    #define DEFINE_SRV_ARRAY(type)                                             \
        StructuredBuffer<type> BindlessSRV_##type##_Load(uint index) {        \
            return ResourceDescriptorHeap[index];                              \
        }
    #define DEFINE_UAV_ARRAY(type)                                                  \
        RWStructuredBuffer<type> BindlessUAV_##type##_Load(uint index) {          \
            return ResourceDescriptorHeap[index];                                   \
        }

    SamplerState BindlessSampler_Load(uint index)
    {
        return SamplerDescriptorHeap[index];
    }

    RaytracingAccelerationStructure BindlessAccelerationStructure_Load(uint index)
    {
        return ResourceDescriptorHeap[index];
    }
#elif VULKAN
    #define PUSH_CONSTANTS(Type, Name) [[vk::push_constant]] ConstantBuffer<Type> Name : register(b0)
    #define DECLARE_BINDLESS_TEXTURE2D(TypeName, Type)                     \
        Texture2D<Type> BindlessTexture2D##TypeName##_Load(uint index)    \
        {                                                                 \
            Texture2D<Type> result = gTexture2DArray##TypeName[index];       \
            return result;                                                \
        }
    #define DECLARE_BINDLESS_TEXTURECUBE(TypeName, Type)                     \
        TextureCube<Type> BindlessTextureCube##TypeName##_Load(uint index)    \
        {                                                                 \
            TextureCube<Type> result = gTextureCubeArray##TypeName[index];       \
            return result;                                                \
        }
    #define DECLARE_BINDLESS_RWTEXTURE2D(TypeName, Type)                  \
        RWTexture2D<Type> BindlessRWTexture2D##TypeName##_Load(uint index)\
        {                                                                 \
            RWTexture2D<Type> result = gRWTexture2DArray##TypeName[index];     \
            return result;                                                \
        }
    #define DECLARE_BINDLESS_RWTEXTURE2DARRAY(TypeName, Type)                  \
        RWTexture2DArray<Type> BindlessRWTexture2DArray##TypeName##_Load(uint index)\
        {                                                                 \
            RWTexture2DArray<Type> result = gRWTexture2DArrayArray##TypeName[index];     \
            return result;                                                \
        }
    #define DEFINE_CBV_ARRAY(type)                                       \
        [[vk::binding(0, 0)]] ConstantBuffer<type> gBindlessCBV_##type[]; \
        ConstantBuffer<type> BindlessCBV_##type##_Load(uint index) {    \
            return gBindlessCBV_##type[index];                        \
        }
    #define DEFINE_SRV_ARRAY(type)                                             \
        [[vk::binding(0, 0)]] StructuredBuffer<type> gBindlessSRV_##type[];   \
        StructuredBuffer<type> BindlessSRV_##type##_Load(uint index) {        \
            return gBindlessSRV_##type[index];                              \
        }
    #define DEFINE_UAV_ARRAY(type)                                                  \
        [[vk::binding(0, 0)]] RWStructuredBuffer<type> gBindlessUAV_##type[];   \
        RWStructuredBuffer<type> BindlessUAV_##type##_Load(uint index) {          \
            return gBindlessUAV_##type[index];                                   \
        }

    
    [[vk::binding(0, 0)]] Texture2D<float> gTexture2DArrayFloat[];
    [[vk::binding(0, 0)]] Texture2D<float2> gTexture2DArrayFloat2[];
    [[vk::binding(0, 0)]] Texture2D<float3> gTexture2DArrayFloat3[];
    [[vk::binding(0, 0)]] Texture2D<float4> gTexture2DArrayFloat4[];
    [[vk::binding(0, 0)]] TextureCube<float> gTextureCubeArrayFloat[];
    [[vk::binding(0, 0)]] TextureCube<float2> gTextureCubeArrayFloat2[];
    [[vk::binding(0, 0)]] TextureCube<float3> gTextureCubeArrayFloat3[];
    [[vk::binding(0, 0)]] TextureCube<float4> gTextureCubeArrayFloat4[];
    [[vk::binding(0, 0)]] RWTexture2D<float> gRWTexture2DArrayFloat[];
    [[vk::binding(0, 0)]] RWTexture2D<float2> gRWTexture2DArrayFloat2[];
    [[vk::binding(0, 0)]] RWTexture2D<float3> gRWTexture2DArrayFloat3[];
    [[vk::binding(0, 0)]] RWTexture2D<float4> gRWTexture2DArrayFloat4[];
    [[vk::binding(0, 0)]] RWTexture2DArray<float> gRWTexture2DArrayArrayFloat[];
    [[vk::binding(0, 0)]] RWTexture2DArray<float2> gRWTexture2DArrayArrayFloat2[];
    [[vk::binding(0, 0)]] RWTexture2DArray<float3> gRWTexture2DArrayArrayFloat3[];
    [[vk::binding(0, 0)]] RWTexture2DArray<float4> gRWTexture2DArrayArrayFloat4[];

    [[vk::binding(1, 0)]] SamplerState gSamplerHandles[];
    [[vk::binding(2, 0)]] RaytracingAccelerationStructure gRaytracingASArray[];

    SamplerState BindlessSampler_Load(uint index)
    {
        return gSamplerHandles[index];
    }

    RaytracingAccelerationStructure BindlessAccelerationStructure_Load(uint index)
    {
        return gRaytracingASArray[index];
    }
#endif

DECLARE_BINDLESS_TEXTURE2D(Float, float);
DECLARE_BINDLESS_TEXTURE2D(Float2, float2);
DECLARE_BINDLESS_TEXTURE2D(Float3, float3);
DECLARE_BINDLESS_TEXTURE2D(Float4, float4);
DECLARE_BINDLESS_TEXTURECUBE(Float, float);
DECLARE_BINDLESS_TEXTURECUBE(Float2, float2);
DECLARE_BINDLESS_TEXTURECUBE(Float3, float3);
DECLARE_BINDLESS_TEXTURECUBE(Float4, float4);
DECLARE_BINDLESS_RWTEXTURE2D(Float, float);
DECLARE_BINDLESS_RWTEXTURE2D(Float2, float2);
DECLARE_BINDLESS_RWTEXTURE2D(Float3, float3);
DECLARE_BINDLESS_RWTEXTURE2D(Float4, float4);
DECLARE_BINDLESS_RWTEXTURE2DARRAY(Float, float);
DECLARE_BINDLESS_RWTEXTURE2DARRAY(Float2, float2);
DECLARE_BINDLESS_RWTEXTURE2DARRAY(Float3, float3);
DECLARE_BINDLESS_RWTEXTURE2DARRAY(Float4, float4);

#endif
