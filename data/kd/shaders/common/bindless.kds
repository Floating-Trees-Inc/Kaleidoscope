//
// > Notice: Floating Trees Inc. @ 2025
// > Create Time: 2025-07-15 22:59:19
//

#ifndef BINDLESS_KDS
#define BINDLESS_KDS

static const uint ALLOC_WIDTH = 1920;
static const uint ALLOC_HEIGHT = 1080;
static const uint INVALID_DESCRIPTOR = 0x00000000;

// Push constants
#ifdef D3D12
    #define PUSH_CONSTANTS(Type, Name) ConstantBuffer<Type> Name : register(b0)
#elif VULKAN
    #define PUSH_CONSTANTS(Type, Name) [[vk::push_constant]] ConstantBuffer<Type> Name : register(b0)
    [[vk::binding(2, 0)]] RaytracingAccelerationStructure gRaytracingASArray[];
#elif METAL
    #define PUSH_CONSTANTS(Type, Name) ConstantBuffer<Type> Name : register(b999)
#endif

// Bindless AS
#ifdef VULKAN
RaytracingAccelerationStructure LoadRaytracingWorld(uint index)
{
    return gRaytracingASArray[index];
}
#elif D3D12 || METAL
RaytracingAccelerationStructure LoadRaytracingWorld(uint index)
{
    return ResourceDescriptorHeap[index];
}
#endif

// Draw ID for indirect
#ifdef D3D12
    struct DrawIDStruct { uint id; };
    cbuffer gDrawID : register(b1) { DrawIDStruct DrawID; }
    uint GetDrawID() { return DrawID.id; }
#elif VULKAN
    [[vk::ext_builtin_input(4426)]] static const uint gDrawID;
    uint GetDrawID()
    {
        return gDrawID;
    }
#elif METAL
    struct WhyTheFuckDoINeedThis { uint id; };

    ConstantBuffer<WhyTheFuckDoINeedThis> gDrawID : register(b998);
    uint GetDrawID()
    {
        return 0;
    }
#endif

#endif
