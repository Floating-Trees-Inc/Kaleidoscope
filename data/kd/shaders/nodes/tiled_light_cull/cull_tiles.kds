//
// > Notice: Floating Trees Inc. @ 2025
// > Create Time: 2025-07-28 21:49:53
//

#include "kd/shaders/common/bindless.kds"
#include "kd/shaders/common/camera.kds"
#include "kd/shaders/common/lights.kds"
#include "kd/shaders/common/math.kds"

#pragma compute CSMain

struct FrustumPlane
{
    float3 Normal;
    float Distance;
};

struct PushConstants
{
    uint LightIndex;
    uint CameraIndex;
    uint TileArray;
    uint BinsArray;

    uint TileWidth;
    uint TileHeight;
    uint NumTilesX;
    uint NumTilesY;

    uint Width;
    uint Height;
    uint PointLightCount;
    uint SpotLightCount;

    uint SpotLightArray;
    uint3 Pad;
};
PUSH_CONSTANTS(PushConstants, Push);

float2 PixelToNDC(int x, int y)
{
    float ndcX = (2.0f * x) / Push.Width - 1.0f;
    float ndcY = 1.0f - (2.0f * y) / Push.Height;
    return float2(ndcX, ndcY);
}

float4 NDCToView(float2 ndc, float z, column_major float4x4 invProj)
{
    float4 clip = float4(ndc, z, 1.0f);
    float4 view = mul(invProj, clip);
    return view / view.w;
}

FrustumPlane MakePlane(float3 a, float3 b, float3 c)
{
    FrustumPlane output = (FrustumPlane)0;
    output.Normal = normalize(cross(b - a, c - a));
    output.Distance = -dot(output.Normal, a);
    return output;
}

bool SphereFrustumTest(float3 center, float radius, FrustumPlane plane)
{
    float distance = dot(plane.Normal, center) + plane.Distance;
    if (distance < -radius) return false;
    return true;
}

float4 ConeBoundingSphere(float3 origin, float3 forward, float size, float angle)
{
    float4 boundingSphere;
    if (angle > PI / 4.0f) {
        boundingSphere.xyz = origin + cos(angle) * size * forward;
        boundingSphere.w = sin(angle) * size;
    } else {
        boundingSphere.xyz = origin + size / (2.0f * cos(angle)) * forward;
        boundingSphere.w = size / (2.0f * cos(angle));
    }
    return boundingSphere;
}

groupshared uint gSharedBin[MAX_LIGHTS_PER_TILE];
groupshared uint gSharedCount;

[numthreads(128, 1, 1)]
void CSMain(uint3 tid: SV_DispatchThreadID, uint3 gtid: SV_GroupThreadID, uint3 gid : SV_GroupID)
{
    if (gid.x >= Push.NumTilesX || gid.y >= Push.NumTilesY)
        return;

    // Map 1D index to 2D tile coordinates
    uint tx = gid.x;
    uint ty = gid.y;
    uint tileIndex = ty * Push.NumTilesX + tx;

    // Reset shared count
    if (gtid.x == 0)
        gSharedCount = 0;
    GroupMemoryBarrierWithGroupSync();

    // Load camera/light data
    ConstantBuffer<Camera> camera = ResourceDescriptorHeap[Push.CameraIndex];
    StructuredBuffer<PointLight> pointLights = ResourceDescriptorHeap[Push.LightIndex];
    StructuredBuffer<SpotLight> spotLights = ResourceDescriptorHeap[Push.SpotLightArray];
    RWStructuredBuffer<TileData> tiles = ResourceDescriptorHeap[Push.TileArray];
    RWStructuredBuffer<uint> bins = ResourceDescriptorHeap[Push.BinsArray];

    tiles[tileIndex].Offset = tileIndex * MAX_LIGHTS_PER_TILE;

    // Compute tile screen bounds
    int x0 = tx * Push.TileWidth;
    int y0 = ty * Push.TileHeight;
    int x1 = min(x0 + Push.TileWidth, Push.Width);
    int y1 = min(y0 + Push.TileHeight, Push.Height);

    // Reconstruct tile frustum (same as before)
    float2 ndcTL = PixelToNDC(x0, y0);
    float2 ndcTR = PixelToNDC(x1, y0);
    float2 ndcBR = PixelToNDC(x1, y1);
    float2 ndcBL = PixelToNDC(x0, y1);

    // Get frustum corners
    float3 v0 = NDCToView(ndcTL, tiles[tileIndex].MinDepth, camera.InvProj).rgb;
    float3 v1 = NDCToView(ndcTR, tiles[tileIndex].MinDepth, camera.InvProj).rgb;
    float3 v2 = NDCToView(ndcBR, tiles[tileIndex].MinDepth, camera.InvProj).rgb;
    float3 v3 = NDCToView(ndcBL, tiles[tileIndex].MinDepth, camera.InvProj).rgb;
    float3 v4 = NDCToView(ndcTL, tiles[tileIndex].MaxDepth, camera.InvProj).rgb;
    float3 v5 = NDCToView(ndcTR, tiles[tileIndex].MaxDepth, camera.InvProj).rgb;
    float3 v6 = NDCToView(ndcBR, tiles[tileIndex].MaxDepth, camera.InvProj).rgb;
    float3 v7 = NDCToView(ndcBL, tiles[tileIndex].MaxDepth, camera.InvProj).rgb;

    // Make frustum planes for point lights
    FrustumPlane left = MakePlane(v0, v3, v7);
    FrustumPlane right = MakePlane(v2, v1, v5);
    FrustumPlane top = MakePlane(v1, v0, v4);
    FrustumPlane bottom = MakePlane(v3, v2, v6);
    FrustumPlane near = MakePlane(v0, v1, v2);
    FrustumPlane far = MakePlane(v5, v4, v7);

    // Make bounding sphere for spot lights
    float3 center = (v0 + v1 + v2 + v3 + v4 + v5 + v6 + v7) / 8.0f;
    float radius = 0.0f;
    float3 corners[8] = { v0, v1, v2, v3, v4, v5, v6, v7 };
    for (int i = 0; i < 8; ++i) {
        radius = max(radius, length(corners[i] - center));
    }
    float4 sphere = float4(center, radius);

    // Each thread handles part of the light list
    uint threadID = gtid.x;
    uint numThreads = 128;

    for (uint i = threadID; i < Push.PointLightCount; i += numThreads)
    {
        PointLight light = pointLights[i];
        float3 viewPos = mul(camera.View, float4(light.Position, 1.0)).xyz;
        bool visible = SphereFrustumTest(viewPos, light.Radius, left)
                    && SphereFrustumTest(viewPos, light.Radius, right)
                    && SphereFrustumTest(viewPos, light.Radius, top)
                    && SphereFrustumTest(viewPos, light.Radius, bottom)
                    && SphereFrustumTest(viewPos, light.Radius, near)
                    && SphereFrustumTest(viewPos, light.Radius, far);

        if (visible) {
            uint idx;
            InterlockedAdd(gSharedCount, 1, idx);
            if (gSharedCount >= MAX_LIGHTS_PER_TILE)
                return;
            gSharedBin[idx] = i;
        }
    }

    for (uint i = threadID; i < Push.SpotLightCount; i += numThreads)
    {
        SpotLight light = spotLights[i];
        float3 viewOrigin = mul(camera.View, float4(light.Position, 1.0)).xyz;
        float3 viewForward = normalize(mul((float3x3)camera.View, light.Forward));
        float4 boundingSphere = ConeBoundingSphere(viewOrigin, viewForward, light.Size, light.Angle);

        bool visible = SphereFrustumTest(boundingSphere.xyz, boundingSphere.w, left)
                    && SphereFrustumTest(boundingSphere.xyz, boundingSphere.w, right)
                    && SphereFrustumTest(boundingSphere.xyz, boundingSphere.w, top)
                    && SphereFrustumTest(boundingSphere.xyz, boundingSphere.w, bottom)
                    && SphereFrustumTest(boundingSphere.xyz, boundingSphere.w, near)
                    && SphereFrustumTest(boundingSphere.xyz, boundingSphere.w, far);
        if (visible) {
            uint idx;
            InterlockedAdd(gSharedCount, 1, idx);
            if (gSharedCount >= MAX_LIGHTS_PER_TILE)
                return;
            gSharedBin[idx] = i | (1u << 31);
        }
    }

    GroupMemoryBarrierWithGroupSync();

    uint lightCount = min(gSharedCount, MAX_LIGHTS_PER_TILE);
    for (uint i = threadID; i < lightCount; i += numThreads) {
        bins[tiles[tileIndex].Offset + i] = gSharedBin[i];
    }

    if (threadID == 0)
    {
        tiles[tileIndex].Count = lightCount;
    }
}
