//
// > Notice: Floating Trees Inc. @ 2025
// > Create Time: 2025-07-28 21:55:39
//

#include "kd/shaders/common/bindless.kds"
#include "sp/shaders/common/camera.kds"
#include "sp/shaders/common/lights.kds"
#include "sp/shaders/common/math.kds"
#include "sp/shaders/common/pbr.kds"
#include "sp/shaders/common/compute.kds"

#pragma compute CSMain

struct PushConstants
{
    uint Depth;
    uint Normal;
    uint Albedo;
    uint PBR; //
    
    uint Output;
    uint Width;
    uint Height;
    uint PointLightArray; //
    
    uint PointLightCount;
    uint CameraDataSRV;
    uint TileWidth;
    uint TileHeight; //

    uint NumTilesX;
    uint BinsArray;
    uint TilesArray;
    uint ShowTileHeatmap; //

    uint SpotLightArray;
    uint SpotLightCount;
    uint SunArray;
    uint ShadowMask;
};
PUSH_CONSTANTS(PushConstants, Push);

float3 GetTileColor(uint tileLightCount)
{
    float t = MAX_LIGHTS_PER_TILE > 0 ? clamp(float(tileLightCount) / float(MAX_LIGHTS_PER_TILE), 0.0f, 1.0f) : 0.0f;

    // Blue → Green → Yellow → Red
    if (t < 0.33f) {
        // Blue to Green
        float localT = t / 0.33f;
        return lerp(float3(0, 0, 1), float3(0, 1, 0), localT);
    }
    else if (t < 0.66f) {
        // Green to Yellow
        float localT = (t - 0.33f) / 0.33f;
        return lerp(float3(0, 1, 0), float3(1, 1, 0), localT);
    }
    else {
        // Yellow to Red
        float localT = (t - 0.66f) / 0.34f;
        return lerp(float3(1, 1, 0), float3(1, 0, 0), localT);
    }
    return float3(0, 0, 1);
}

float3 EvaluatePointLight(PointLight light, float3 V, float4 worldPosition, float3 N, float3 materialColor, float metallic, float roughness)
{
    float3 lightVector = light.Position - worldPosition.xyz;
    float distance = length(lightVector);
    float3 L = lightVector / distance;

    float attenuation = 1.0 / (distance * distance + 1.0);  // safe inverse-square
    attenuation *= saturate(1.0 - distance / light.Radius); // fade to 0 at max range

    // Cook-Torrance
    float3 H = normalize(V + L);
    float NdotL = max(dot(N, L), 0.0001);
    float NdotV = max(dot(N, V), 0.0001);
    float HdotV = max(dot(H, V), 0.0001);

    float D = DistributionGGX(N, H, roughness);
    float G = GeometrySmith(N, V, L, roughness);
    float3 F0 = lerp(float3(0.04, 0.04, 0.04), materialColor, metallic);
    float3 F = FresnelSchlick(HdotV, F0);

    float3 numerator = D * G * F;
    float denominator = 4 * NdotL * NdotV + 0.0001;
    float3 specular = numerator / denominator;

    // Lambertian
    float3 kD = (1.0 - F) * (1.0 - metallic);
    float3 diffuse = kD * materialColor / PI;

    // Apply attenuation to final contribution
    float3 distributedEnergy = ((diffuse + specular) * NdotL);
    float3 incomingRadiance = attenuation * light.Color * light.Intensity;
    return (distributedEnergy * incomingRadiance * (1.0 - Push.ShowTileHeatmap));
}

float3 EvaluateSpotLight(SpotLight light, float3 V, float4 worldPosition, float3 N, float3 materialColor, float metallic, float roughness)
{
    float3 lightVector = light.Position - worldPosition.xyz;
    float distance = length(lightVector);
    float3 L = lightVector / distance;

    // Angle attenuation (spotlight cone)
    float3 toFragment = -L;
    float spotFactor = dot(toFragment, normalize(light.Forward));

    float cosAngle = cos(light.Angle);

    // Smooth fade at edge of cone
    float falloff = saturate((spotFactor - cosAngle) / (1.0 - cosAngle));

    if (falloff <= 0.0001)
        return float3(0, 0, 0); // Outside the cone

    // Distance attenuation
    float attenuation = 1.0 / (distance * distance + 1.0);
    attenuation *= saturate(1.0 - distance / light.Size);

    // Combine angle falloff and distance attenuation
    attenuation *= falloff;

    // Cook-Torrance lighting (same as point light)
    float3 H = normalize(V + L);
    float NdotL = max(dot(N, L), 0.0001);
    float NdotV = max(dot(N, V), 0.0001);
    float HdotV = max(dot(H, V), 0.0001);

    float D = DistributionGGX(N, H, roughness);
    float G = GeometrySmith(N, V, L, roughness);
    float3 F0 = lerp(float3(0.04, 0.04, 0.04), materialColor, metallic);
    float3 F = FresnelSchlick(HdotV, F0);

    float3 numerator = D * G * F;
    float denominator = 4.0 * NdotL * NdotV + 0.0001;
    float3 specular = numerator / denominator;

    float3 kD = (1.0 - F) * (1.0 - metallic);
    float3 diffuse = kD * materialColor / PI;

    float3 distributedEnergy = (diffuse + specular) * NdotL;
    float3 incomingRadiance = attenuation * light.Color * light.Intensity;
    return (distributedEnergy * incomingRadiance * (1.0 - Push.ShowTileHeatmap));
}

float3 EvaluateDirectionalLight(DirectionalLight light, float3 V, float4 worldPosition, float3 N, float3 materialColor, float metallic, float roughness)
{
    float3 L = -light.Direction;

    // Cook-Torrance
    float3 H = normalize(V + L);
    float NdotL = max(dot(N, L), 0.0001);
    float NdotV = max(dot(N, V), 0.0001);
    float HdotV = max(dot(H, V), 0.0001);

    float D = DistributionGGX(N, H, roughness);
    float G = GeometrySmith(N, V, L, roughness);
    float3 F0 = lerp(float3(0.04, 0.04, 0.04), materialColor, metallic);
    float3 F = FresnelSchlick(HdotV, F0);

    float3 numerator = D * G * F;
    float denominator = 4 * NdotL * NdotV + 0.0001;
    float3 specular = numerator / denominator;

    // Lambertian
    float3 kD = (1.0 - F) * (1.0 - metallic);
    float3 diffuse = kD * materialColor / PI;

    // Apply attenuation to final contribution
    float3 distributedEnergy = ((diffuse + specular) * NdotL);
    float3 incomingRadiance = light.Color * light.Intensity;
    return (distributedEnergy * incomingRadiance);
}

[numthreads(8, 8, 1)]
void CSMain(uint3 tid: SV_DispatchThreadID)
{
    if (tid.x >= Push.Width || tid.y >= Push.Height) return;

    // Resources
    Texture2D<float> depth = ResourceDescriptorHeap[Push.Depth];
    Texture2D<float4> normal = ResourceDescriptorHeap[Push.Normal];
    Texture2D<float4> albedo = ResourceDescriptorHeap[Push.Albedo];
    Texture2D<float2> pbr = ResourceDescriptorHeap[Push.PBR];
    Texture2D<float> shadowMask = ResourceDescriptorHeap[Push.ShadowMask];
    RWTexture2D<float4> output = ResourceDescriptorHeap[Push.Output];
    StructuredBuffer<PointLight> pointLights = ResourceDescriptorHeap[Push.PointLightArray];
    StructuredBuffer<SpotLight> spotLights = ResourceDescriptorHeap[Push.SpotLightArray];
    StructuredBuffer<DirectionalLight> sun = ResourceDescriptorHeap[Push.SunArray];
    StructuredBuffer<TileData> tiles = ResourceDescriptorHeap[Push.TilesArray];
    StructuredBuffer<uint> bins = ResourceDescriptorHeap[Push.BinsArray];
    ConstantBuffer<Camera> camera = ResourceDescriptorHeap[Push.CameraDataSRV];

    // Get current tile
    uint tileX = tid.x / Push.TileWidth;
    uint tileY = tid.y / Push.TileHeight;
    uint tileIndex = tileY * Push.NumTilesX + tileX;
    TileData tile = tiles[tileIndex];

    // Load Basic data
    float viewDepth = depth.Load(tid);
    float2 uv = TexelToUV(tid.xy, float2(Push.Width, Push.Height));
    float3 cameraPosition = camera.Position.xyz;
    float4 worldPosition = GetWorldFromDepth(uv, viewDepth, camera.InvViewProj);
    float3 materialColor = albedo.Load(tid).rgb;
    float3 N = normalize(normal.Load(tid).rgb);
    float metallic = pbr.Load(tid).r;
    float roughness = pbr.Load(tid).g;

    // Math!
    float3 V = normalize(cameraPosition - worldPosition.xyz);
    float3 finalColor = GetTileColor(tile.Count) * Push.ShowTileHeatmap;

    // Evaluate direct diffuse/specular from local lights
    for (int i = 0; i < tile.Count; i++) {
        uint encoded = bins[tile.Offset + i];
        bool isSpot = (encoded & (1u << 31)) != 0;
        uint lightIndex = encoded & 0x7FFFFFFF;

        float3 contrib = float3(0, 0, 0);
        if (isSpot) {
            contrib = EvaluateSpotLight(spotLights[lightIndex], V, worldPosition, N, materialColor, metallic, roughness);
        } else {
            contrib = EvaluatePointLight(pointLights[lightIndex], V, worldPosition, N, materialColor, metallic, roughness);
        }
        finalColor += contrib;
    }

    // Evaluate direct diffuse/specular from sun
    finalColor += EvaluateDirectionalLight(sun[0], V, worldPosition, N, materialColor, metallic, roughness) * shadowMask.Load(tid);

    // Evaluate indirect specular from mask
    // TODO

    // Evaluate indirect diffuse from mask
    // TODO

    output[tid.xy] = float4(finalColor, 1.0);
}
