//
// > Notice: Floating Trees Inc. @ 2025
// > Create Time: 2025-07-28 20:28:06
//

#include "kd/shaders/common/bindless.kds"
#include "sp/shaders/common/shadow.kds"
#include "sp/shaders/common/camera.kds"
#include "sp/shaders/common/math.kds"
#include "sp/shaders/common/compute.kds"
#include "sp/shaders/common/lights.kds"
#include "sp/shaders/common/random.kds"

#pragma compute CSMain

struct PushConstants
{
    uint SunArray;
    uint Output;
    uint SceneAS;
    float NormalBias;

    uint Width;
    uint Height;
    uint GBufferDepth;
    uint GBufferNormal;

    uint CameraIndex;
    uint Sampler;
    uint SceneInstances;
    uint FrameIndex;

    float LightRadius;
    uint SceneMaterials;
    float2 Pad;
};
PUSH_CONSTANTS(PushConstants, Push);

[numthreads(8, 8, 1)]
void CSMain(uint3 dtid: SV_DispatchThreadID)
{
    if (dtid.x >= Push.Width || dtid.y >= Push.Height)
        return;

    // Load resources
    RWTexture2D<float> output = ResourceDescriptorHeap[Push.Output];
    Texture2D<float> depth = ResourceDescriptorHeap[Push.GBufferDepth];
    Texture2D<float4> normal = ResourceDescriptorHeap[Push.GBufferNormal];
    RaytracingAccelerationStructure sceneAS = LoadRaytracingWorld(Push.SceneAS);
    StructuredBuffer<DirectionalLight> sun = ResourceDescriptorHeap[Push.SunArray];
    ConstantBuffer<Camera> camera = ResourceDescriptorHeap[Push.CameraIndex];

    // Load data
    float viewDepth = depth.Load(dtid);
    float2 uv = TexelToUV(dtid.xy, float2(Push.Width, Push.Height));
    float3 cameraPosition = camera.Position.xyz;
    float4 worldPosition = GetWorldFromDepth(uv, viewDepth, camera.InvViewProj);
    float3 N = normalize(normal.Load(dtid).rgb);
    float3 L = -sun[0].Direction;

    // Logic
    float attenuation = clamp(dot(N, L), 0.0, 1.0);
    if (attenuation > 0.0f && viewDepth != 1.0f) {
        RNG rng;
        rng.Init(dtid.xy, Push.FrameIndex * 1923);

        // Trace ray, generate random Wi
        float lightRadius = radians(Push.LightRadius);
        float3 lightTangent = normalize(cross(L, float3(0.0f, 1.0f, 0.0f)));
        float3 lightBitangent = normalize(cross(lightTangent, L));

        // Calculate disk point
        float2 randSample = rng.NextFloat2();
        float pointRadius = lightRadius * sqrt(randSample.x);
        float pointAngle = randSample.y * 2.0f * PI;
        float2 diskPoint = float2(pointRadius * cos(pointAngle), pointRadius * sin(pointAngle));

        // Wi
        float3 Wi = normalize(L + diskPoint.x * lightTangent + diskPoint.y * lightBitangent);

        // trace
        RayDesc ray;
        ray.Origin = worldPosition.xyz + N * Push.NormalBias;
        ray.Direction = Wi;
        ray.TMin = 0.001f;
        ray.TMax = 10000.0f;

        RayQuery<RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH> q;
        q.TraceRayInline(sceneAS, RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH, 0xFF, ray);
        while (q.Proceed()) {
            q.CommitNonOpaqueTriangleHit();
        }

        if (q.CommittedStatus() == COMMITTED_TRIANGLE_HIT) {
            output[dtid.xy] = 0.0f;
        } else {
            output[dtid.xy] = 1.0f;
        }
    } else {
        output[dtid.xy] = 1.0f;
    }
}
