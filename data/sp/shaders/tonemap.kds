//
// > Notice: Floating Trees Inc. @ 2025
// > Create Time: 2025-07-20 13:55:28
//

#include "kd/shaders/common/bindless.kds"

#pragma compute CSMain

static const float3x3 ACESInputMat = {
    { 0.59719, 0.35458, 0.04823 },
    { 0.07600, 0.90834, 0.01566 },
    { 0.02840, 0.13383, 0.83777 }
};

static const float3x3 ACESOutputMat = {
    { 1.60475, -0.53108, -0.07367 },
    { -0.10208, 1.10813, -0.00605 },
    { -0.00327, -0.07276, 1.07602 }
};

struct PushConstants
{
    uint HDR;
    uint LDR;
    uint Width;
    uint Height;
};
PUSH_CONSTANTS(PushConstants, Push);

float3 RRTAndODTFit(float3 v)
{
    float3 a = v * (v + 0.0245786f) - 0.000090537f;
    float3 b = v * (0.983729f * v + 0.4329510f) + 0.238081f;
    return a / b;
}

float3 ACESFitted(float3 color)
{
    color = mul(ACESInputMat, color);
    color = RRTAndODTFit(color);
    color = mul(ACESOutputMat, color);
    color = saturate(color);
    return color;
}

[numthreads(8, 8, 1)]
void CSMain(uint3 tid: SV_DispatchThreadID)
{
    if (tid.x >= Push.Width || tid.y >= Push.Height) return;
    
    Texture2D<float4> hdr = ResourceDescriptorHeap[Push.HDR];
    RWTexture2D<float4> ldr = ResourceDescriptorHeap[Push.LDR];

    float4 mappedColor = float4(ACESFitted(hdr.Load(tid).rgb), 1.0f);
    mappedColor = pow(mappedColor, 1.0 / 2.2);
    ldr[tid.xy] = mappedColor;
}
